/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.14
 * Generated at: 2019-10-25 11:13:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.templates;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.chainsys.core.vo.UserProfileVO;
import org.json.JSONObject;

public final class PlatformHeader_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.json.JSONObject");
    _jspx_imports_classes.add("com.chainsys.core.vo.UserProfileVO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
JSONObject loggedUserApp = new JSONObject(pageContext.getSession().getAttribute("LOGGED_USER_APPLICATIONS").toString()); 
      out.write('\r');
      out.write('\n');
String notifyURL =(String) session.getAttribute("NOTIFICATION_URL");
UserProfileVO profileVO = (UserProfileVO)session.getAttribute("USER_PROFILE");
String loggedDisplayName = profileVO.getDisplayName();
String loggedUserName = profileVO.getUserName();
int userId = profileVO.getLoggedUserId();
int orgId = profileVO.getOrgId();
String photo = (String) session.getAttribute("LOGGED_USER_PHOTO");
photo = photo!=null&&!photo.equals("")?photo:"../images/csbase/sample-user.png";
String  applicationId = pageContext.getSession().getAttribute("CURRENT_APPLICATION_ID").toString();
JSONObject applicationDetails = new JSONObject(loggedUserApp .getString(String.valueOf(applicationId).toString()));
String applicationName = applicationDetails.getString("applicationName");
String applicationLogo = applicationDetails.has("applicationSourceLogoPath")? applicationDetails.getString("applicationSourceLogoPath") : "";
String orgImage = (String) session.getAttribute("ORG_LOGO");
      out.write("\r\n");
      out.write("    <style>\r\n");
      out.write("\t  .icon-cs-icon-connections:before {\r\n");
      out.write("\t    content: none;\r\n");
      out.write("\t}\r\n");
      out.write("\t</style>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t   var orgLogo = '");
      out.print(orgImage);
      out.write("';\r\n");
      out.write("\t   var orgId = '");
      out.print(orgId);
      out.write("';\r\n");
      out.write("\t</script>\r\n");
      out.write("    <!--header-->\r\n");
      out.write(" \t<div id=\"logApplicationNameDiv\" class=\"cs-userinut-main\">\r\n");
      out.write(" \t</div>\r\n");
      out.write(" \t<header class=\"clearfix\"> \r\n");
      out.write("\t\t<div class=\"cs-logo cs-pull-left\">\r\n");
      out.write("\t\t\t<div id=\"cs_switchmenu\" class=\"cs-nav-icon cs-navtop cs-cur cs-inline cs-pull-left\">\r\n");
      out.write("\t\t\t\t  <img class=\"cs-tc-21\" src=\"../images/menu.png\" width=\"20px\" height=\"20px\" alt=\"menu\">\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<a href=\"#\" class=\"cs-show cs-pull-left\">\r\n");
      out.write("\t\t\t\t<span class=\"cs-cs-platform-logo\"><img src=\"../images/product-logo.png\"  alt=\"Logo\"/></span>\r\n");
      out.write("\t\t\t\t<span class=\"cs-productname-blk\">");
      out.print(applicationName);
      out.write("</span>\r\n");
      out.write("\t\t\t</a>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<ul class=\"cs-nav-header cs-unstyled cs-pull-right cs-cell-12 cs-hpad clearfix\">\r\n");
      out.write("\t\t <li class=\"cs-pull-right cs-user-icon cs-pr clearfix cs-rmar\"> \r\n");
      out.write("\t\t \t<span class= \"cs-flex cs-userandcustlogo cs-4x-radius\">\r\n");
      out.write("\t\t\t\t<span class=\"cs-show cs-user-img cs-lpad\"> \r\n");
      out.write("\t\t\t\t\t<a href=\"javascript:void(0)\" class=\"cs-show clearfix cs-rmar\"> \r\n");
      out.write("\t\t\t\t\t<img src=\"");
      out.print(photo);
      out.write("\" height=\"30px\" width=\"30px\" alt=\"");
      out.print(loggedUserName);
      out.write("\"/> \r\n");
      out.write("\t\t\t\t\t</a> \r\n");
      out.write("\t\t\t\t</span>\r\n");
      out.write("\t\t\t\t<span class=\"cs-logo-blk cs-tc\">\r\n");
      out.write("\t\t\t\t\t<img id=");
      out.print(orgId);
      out.write(" src=\"\">\r\n");
      out.write("\t\t\t\t</span>\r\n");
      out.write("\t\t\t</span>\r\n");
      out.write("\t\t\t<div class=\"cs-n-account-setting\">\r\n");
      out.write("\t\t\t\t<p class=\"cs-tw-600\">This account is managed by <span class=\"cs-ts-12\"><span>CHAIN.</span><span class=\"cs-redc\">SYS</span></span></p>\r\n");
      out.write("\t\t\t\t<div class=\"clearfix cs-n-user-detail-main\">\r\n");
      out.write("\t\t\t\t\t<div class=\"cs-n-user-img cs-tsmar\">\r\n");
      out.write("\t\t\t\t\t\t<img src=\"");
      out.print(photo);
      out.write("\" alt=\"");
      out.print(loggedUserName);
      out.write("\"/> \r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<div class=\"cs-n-user-detail\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"cs-n-user-name cs-tw-600\">");
      out.print(loggedDisplayName);
      out.write("</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"cs-n-user-mail cs-grey-lighten\">");
      out.print(loggedUserName);
      out.write("</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"clearfix cs-n-user-acc cs-bluec\">\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"cs-n-user-accset cs-vmar-sm cs-cur cs-pull-left\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/core/UserProfileLaunchMapping.echn\"> \r\n");
      out.write("\t\t\t\t\t\t          <span>Account-Settings</span>\r\n");
      out.write("\t\t\t\t\t\t        </a>\r\n");
      out.write("\t\t\t\t        \t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"cs-n-user-chngpwrd cs-cur cs-pull-right\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/core/PasswordResetMapping.echn?redirectMapping=PROFILE\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<span>Change Password</span></a>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"cs-n-user-logout cs-btn cs-btn-info cs-btn-primary cs-tsmar\" onclick=\"logOut();\">\r\n");
      out.write("\t\t\t\t\t\t \t<span class=\"cs-inline cs-hsmar\">Log out</span>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t </div> \r\n");
      out.write("\t\t   </li>  \r\n");
      out.write("\t\t   <li class=\"cs-pull-right clearfix cs-rmar\">\r\n");
      out.write("\t\t    \t<a href=\"#\" id=\"Applicationlogs\" onclick=\"fetchnodelist()\"style=\"display:block;\" class=\"icon-cs-application-logs cs-ts-16\" title=\"ApplicationLogs\">\r\n");
      out.write("\t\t    \t\t<!-- <i class=\"icon-cs-application-logs cs-ts-18 cs-show\"></i> -->\r\n");
      out.write("\t\t       \t\t<!-- <a  href=\"#\"class=\"cs-show\"><span id=\"Popup\" onclick=\"fetchnodelist()><i class=\"icon-cs-application-logs cs-ts-16\"></i></span> -->\r\n");
      out.write("\t\t      \t</a>\r\n");
      out.write("\t\t   </li>\r\n");
      out.write("\t\t   <li class=\"cs-pull-right cs-popover-wrapper cs-pr cs-rmar\">\r\n");
      out.write("\t\t\t   <a href=\"#\" title=\"Notifications\" class=\"cs-show cs-notification-popup cs-count-added\" data-role=\"popover\" data-target=\"example-popover-notifications\">\r\n");
      out.write("\t\t\t   \t\t <i class=\"icon-cs-notification-o cs-blackc cs-ts-18 cs-show\"></i>\r\n");
      out.write("\t\t\t   \t\t <span class=\"cs-noti-count cs-badge cs-label-danger\"></span> \r\n");
      out.write("\t\t\t   \t</a> \r\n");
      out.write("\t\t        <!-- Notification popup -->\r\n");
      out.write("\t\t        <div class=\"cs-notifications cs-popover-modal example-popover-notifications cs-pad \" style=\"width:280px!important\">\r\n");
      out.write("\t\t            <ul class=\"cs-scroll-2 cs-pr ps-container ps-theme-default\">\r\n");
      out.write("\t\t            </ul>\r\n");
      out.write("\t\t            <a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/appplatform/NotificationForm.echn?action=launch\" class=\"cs-tr cs-show cs-ts-12 cs-pr cs-pa-b cs-see-all cs-cur\">see all notifications..</a>\r\n");
      out.write("\t\t            <span class=\"no-notification cs-flex cs-center cs-align-column cs-grayc\">\r\n");
      out.write("\t\t\t\t\t  <i class=\"icon-cs-no-notification no-notification-ic\"></i>\r\n");
      out.write("\t\t\t\t\t  <span>No new notifications..</span>\r\n");
      out.write("\t\t         \t</span>\r\n");
      out.write("\t\t        </div>\r\n");
      out.write("\t\t    </li>   \r\n");
      out.write("\t\t</ul>\r\n");
      out.write("\t    <input type='hidden' name='applicationLogId' id= 'applicationLogId'>\r\n");
      out.write("\t </header>\r\n");
      out.write(" \t <script>\r\n");
      out.write(" \t\tvar isFireFox = navigator.userAgent.toUpperCase().indexOf('FIREFOX')!=-1;\r\n");
      out.write("\t\tvar PFM_CONTEXT_PATH = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\";\r\n");
      out.write("\t\tvar notificationArr = [];\r\n");
      out.write("\t\tvar notifyCount = 0;\r\n");
      out.write("\t\tvar notificationIds = \"\" ;\r\n");
      out.write("\t\t$(document).ready(function(){\r\n");
      out.write("\t\t\tgetNotificationArray();\r\n");
      out.write("\t\t\t$(document).on('click',function(e){\r\n");
      out.write("\t\t\t\t//$(\".cs-notifications\").slideUp();\r\n");
      out.write("\t\t\t\t$(\".cs-n-account-setting\").css('display','none')\r\n");
      out.write("\t\t\t\te.stopPropagation();\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif(orgLogo == '' || orgLogo == null || orgLogo == undefined || orgLogo == 'null'){\r\n");
      out.write("\t\t\t   $('.cs-logo-blk').css('width','120px');\r\n");
      out.write("\t\t   }else{\r\n");
      out.write("\t\t\t   $('.cs-logo-blk').removeAttr('style');\r\n");
      out.write("\t\t\t   $('.cs-logo-blk #'+orgId).attr('src',orgLogo);\r\n");
      out.write("\t\t   }\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tif(");
      out.print(notifyURL!=null);
      out.write("){\r\n");
      out.write("\t\t\t(function poll(){ \r\n");
      out.write("\t\t \t\t var socket = io.connect('");
      out.print(notifyURL);
      out.write("', {query: 'userId=' + ");
      out.print(userId);
      out.write(" +'&orgId='+");
      out.print(orgId);
      out.write("}); \t    \t\r\n");
      out.write("\t\t \t\t\tsocket.on('connect', function () {\r\n");
      out.write("\t\t \t\t\t\tsocket.emit('getNotification',notificationArr.length , function (data) {\r\n");
      out.write("\t\t\t \t\t\t\tif (typeof data !== \"undefined\"){\r\n");
      out.write("\t\t\t \t\t\t\t\t//console.log(data); \r\n");
      out.write("\t\t\t \t\t\t\t}\r\n");
      out.write("\t\t \t\t\t\t});\r\n");
      out.write("\t\t \t\t\t\tsocket.on('getMessage', function(data) {\r\n");
      out.write("\t\t \t\t\t\t\tif (typeof data !== \"undefined\") {\r\n");
      out.write("\t\t \t\t\t\t\t\tif(data.length > 0){\r\n");
      out.write("\t\t \t\t\t \t    \t\tvar notificationFetchArr = JSON.parse(data);\r\n");
      out.write("\t\t \t\t\t \t    \t\t$.each(notificationFetchArr, function (index, value){\r\n");
      out.write("\t \t\t\t \t    \t\t\t\tnotificationArr.unshift(notificationFetchArr[index]);\r\n");
      out.write("\t\t \t\t\t \t    \t\t});\r\n");
      out.write("\t\t \t\t\t \t    \t\tsetNotificationArray(JSON.stringify(notificationArr));\r\n");
      out.write("\t\t \t\t\t \t    \t\tnotifyCount = notificationArr.length;\r\n");
      out.write("\t\t \t\t\t \t    \t\tupdateNotificationCount(notifyCount);\r\n");
      out.write("\t\t \t\t\t \t    \t\t//hideNotificationCount();\r\n");
      out.write("\t\t \t\t\t \t    \t}\r\n");
      out.write("\t\t \t\t\t\t\t}\r\n");
      out.write("\t\t \t\t\t\t});\r\n");
      out.write("\t\t \t\t\t});\r\n");
      out.write("\t\t \t \t})(); \r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\t\t/* Notification popup */\r\n");
      out.write("\t\t\t$(\".cs-notification-popup\").click(function(e){\t\r\n");
      out.write("\t\t\t\te.stopPropagation();\r\n");
      out.write("\t\t\t\tif($(\".cs-n-account-setting\").css('display') == 'block'){\r\n");
      out.write("\t\t\t\t\t$(\".cs-n-account-setting\").css('display','none');\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t//$(\".cs-notifications\").slideToggle();\r\n");
      out.write("\t\t\t\t$(\".cs-notifications ul\").empty();\r\n");
      out.write("\t\t\t \t$.each(notificationArr, function (index, value){\r\n");
      out.write("\t\t\t \t\tif(this.messageType == \"INFO\"){\r\n");
      out.write("\t\t\t \t\t\tnotifyTitle = \"Information\";\r\n");
      out.write("\t\t\t \t\t\ticonType = \"Blue\";\r\n");
      out.write("\t\t\t \t\t}else if(this.messageType == \"WARNING\"){\r\n");
      out.write("\t\t\t \t\t\tnotifyTitle = \"Warning\";\r\n");
      out.write("\t\t\t \t\t\ticonType = \"Yellow\";\r\n");
      out.write("\t\t\t \t\t}else if(this.messageType == \"SUCCESS\"){\r\n");
      out.write("\t\t\t \t\t\tnotifyTitle = \"Success\";\r\n");
      out.write("\t\t\t \t\t\ticonType = \"Green\";\r\n");
      out.write("\t\t\t \t\t}else if(this.messageType == \"ERROR\"){\r\n");
      out.write("\t\t\t \t\t\tnotifyTitle = \"Error\";\r\n");
      out.write("\t\t\t \t\t\ticonType = \"Red\";\r\n");
      out.write("\t\t\t \t\t}\r\n");
      out.write("\t\t\t \t\tvar timeStamp = this.createdOn;\r\n");
      out.write("\t\t\t \t\tvar createdDateObj = new Date(parseInt(timeStamp));\r\n");
      out.write("\t\t\t \t\tvar createdDate = createdDateObj.toDateString().slice(4);\r\n");
      out.write("\t\t\t \t\tvar currentDate = new Date();\r\n");
      out.write("\t\t\t \t\tvar timeElapsed = currentDate-timeStamp;\r\n");
      out.write("\t\t\t \t\tif(timeElapsed<60000){\r\n");
      out.write("\t\t\t \t\t\ttimeElasp =\"Just now\"\r\n");
      out.write("\t\t\t \t\t}else if(timeElapsed>60000 && timeElapsed<3600000){\r\n");
      out.write("\t\t\t \t\t\ttimeElasp =Math.floor((timeElapsed/60000))+\" mins ago\"\r\n");
      out.write("\t\t\t \t\t}else if(timeElapsed>=3600000 && timeElapsed<86400000){\r\n");
      out.write("\t\t\t \t\t\ttimeElasp = Math.floor((timeElapsed/3600000))+\" hours ago\"\r\n");
      out.write("\t\t\t \t\t}else if(timeElapsed>=86400000){\r\n");
      out.write("\t\t\t \t\t\ttimeElasp = Math.floor((timeElapsed/86400000))+\" days ago\"\r\n");
      out.write("\t\t\t \t\t}\r\n");
      out.write("\t\t\t \t\tnotifycontent = this.message;\r\n");
      out.write("\t\t\t \t\t\r\n");
      out.write("\t\t\t \t\tif(isNotNull(this.messageUrl))\r\n");
      out.write("\t\t\t \t\t   notificationPopup = '<li onclick=\"location.href=\\''+this.messageUrl+'\\';\" class=\"cs-hpad-sm\" id=\"'+this.notificationId+'\" style=\"margin: 5px 0;\">';\r\n");
      out.write("\t\t\t \t\telse   \r\n");
      out.write("\t\t\t \t\t   notificationPopup = '<li class=\"cs-hpad-sm\" id=\"'+this.notificationId+'\" style=\"margin: 5px 0;\">';\r\n");
      out.write("\t\t\t \t\t   \r\n");
      out.write("\t\t\t \t\tnotificationPopup +=' <span class=\"cs-notificationseach cs-truncate cs-flex cs-align-column\">'\r\n");
      out.write("\t\t\t \t\t     +' <span class=\"cs-tw-600\">'+notifyTitle+'</span> '\r\n");
      out.write("\t\t\t \t\t     +' <i class=\"icon-cs-reject-o cs-ts-8 cs-pop-Notification-close cs-pa\" style=\"margin: 0 0 0 75%;\" ></i>'\r\n");
      out.write("\t\t\t \t\t     +'<span>'+notifycontent+'</span>'\r\n");
      out.write("\t\t\t \t\t     +' <span class=\"cs-ts-8 cs-truncate cs-pa\" style=\"margin: 35px 0;\">'+timeElasp+'</span></span></li>'\r\n");
      out.write("\t\t\t \t\t$(\".cs-notify-btn, .nti-unread\").css(\"display\",\"block\");\t\t\r\n");
      out.write("\t\t\t \t\t$(\".cs-notifications ul\").append(notificationPopup);\r\n");
      out.write("\t\t\t \t\t$(\".cs-notifications\").removeClass('nonew-notification');\r\n");
      out.write("\t\t\t\t\tif(isNotNull(notificationIds)){\r\n");
      out.write("\t\t\t\t\t\tnotificationIds +=','+this.notificationId;\r\n");
      out.write("\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\tnotificationIds = this.notificationId;\r\n");
      out.write("\t\t\t\t\t} \t \t\t\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t \tif(isNotNull(notificationIds))\r\n");
      out.write("\t\t\t \t\tupdateSeenStatus(notificationIds);\r\n");
      out.write("\t\t\t \tif(notificationArr.length == \"0\"){\t\t\r\n");
      out.write("\t\t\t \t\t$('.no-notification a').remove();\r\n");
      out.write("\t\t\t\t\t$(\".cs-notifications\").addClass('nonew-notification');\r\n");
      out.write("\t\t\t\t\tvar html = '<a class=\"cs-tr cs-show cs-ts-11 cs-pr cs-pa-b cs-cur\" style=\"margin: 5% 0 0 45%;display:block !important;\" onclick=\"getAllNotifications()\">Show old Notifications</a>'\r\n");
      out.write("\t\t\t\t\t$(html).insertAfter('.no-notification span');\r\n");
      out.write("\t\t\t\t\t$('.cs-see-all').hide();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t \t$(\".cs-header-popover-notifications li\").click(function(ev){\r\n");
      out.write("\t\t\t \t\t$(this).find(\"b\").removeClass(\"unRead\");\r\n");
      out.write("\t\t \t\t});\r\n");
      out.write("\t\t\t \t$(\".cs-mark-read\").click(function(ev){\r\n");
      out.write("\t\t\t\t \t\t$(\".cs-header-popover-notifications\").find(\"b\").removeClass(\"unRead\");\r\n");
      out.write("\t\t\t \t});\r\n");
      out.write("\t\t\t \t$(\".cs-pop-Notification-close\").click(function(ev){\r\n");
      out.write("\t\t\t \t\tremoveNotification(ev); \t\t\r\n");
      out.write("\t\t\t \t});\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tfunction updateSeenStatus(notificationIds){\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t \t\turl : \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/appplatform/NotificationForm.echn?action=updateSeenFlag\",\r\n");
      out.write("\t\t\t \t\ttype : \"POST\",\r\n");
      out.write("\t\t\t \t\tdata : {\r\n");
      out.write("\t\t\t \t\t\t\"notificationIds\" : notificationIds\r\n");
      out.write("\t\t\t \t\t},\r\n");
      out.write("\t\t\t \t\tsuccess : function() {\r\n");
      out.write("\t\t\t \t\t}\r\n");
      out.write("\t\t\t \t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t \t\r\n");
      out.write("\t\t\tfunction removeNotification(ev){\r\n");
      out.write("\t\t\t\tremoveId = $(ev.target).closest(\"li\").attr(\"id\");\r\n");
      out.write("\t\t\t\t$.each(notificationArr, function (index, value){\r\n");
      out.write("\t\t\t\t\tif(this.notificationId == removeId){\r\n");
      out.write("\t\t\t\t\t\tnotificationArr.splice(index,1);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tnotifyCount = notificationArr.length;\r\n");
      out.write("\t\t\t\tupdateNotificationCount(notifyCount);\r\n");
      out.write("\t\t\t\tsetNotificationArray(JSON.stringify(notificationArr));\r\n");
      out.write("\t\t\t\t$(ev.target).closest(\"li\").remove();\r\n");
      out.write("\t\t\t\tif(notificationArr.length == \"0\"){\r\n");
      out.write("\t\t\t\t\temptyNotifiactionPopup();\r\n");
      out.write("\t\t\t\t}\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tfunction emptyNotifiactionPopup(){\r\n");
      out.write("\t\t\t\t$('.no-notification a').remove();\r\n");
      out.write("\t\t\t\t$(\".cs-notify-btn, .nti-unread\").css(\"display\",\"none\");\r\n");
      out.write("\t\t\t\t$(\".cs-notifications\").addClass('nonew-notification');\r\n");
      out.write("\t\t\t\tvar html = '<a class=\"cs-tr cs-show cs-ts-11 cs-pr cs-pa-b cs-cur\" style=\"margin: 5% 0 0 45%;\" onclick=\"getAllNotifications()\">Show old Notifications</a>'\r\n");
      out.write("\t\t\t\t$(html).insertAfter('.no-notification span');\r\n");
      out.write("\t\t\t\t$('.cs-see-all').hide();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tfunction updateNotificationCount(notifyCount){\r\n");
      out.write("\t\t\t\t$(\".cs-noti-count\").empty();\r\n");
      out.write("\t\t\t\t$(\".cs-noti-count\").append(notifyCount);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t}\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tfunction hideNotificationCount(){\r\n");
      out.write("\t\t\t\t$(\".cs-noti-count\").removeClass(\"cs-hide\");\r\n");
      out.write("\t\t\t\t$(\".cs-noti-count\").addClass(\"cs-show cs-badge cs-label-danger\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tfunction getAllNotifications(){\r\n");
      out.write("\t\t\t\tlocation.href = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/appplatform/NotificationForm.echn?action=launch&getAllNotifications=Y\";\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tfunction setNotificationArray(notificationArr){\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t \t\turl : \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/appplatform/NotificationForm.echn?action=setNotificationArray\",\r\n");
      out.write("\t\t\t \t\ttype : \"POST\",\r\n");
      out.write("\t\t\t \t\tdata : {\r\n");
      out.write("\t\t\t \t\t\t\"notificationArr\" : notificationArr\r\n");
      out.write("\t\t\t \t\t},\r\n");
      out.write("\t\t\t \t\tsuccess : function() {\r\n");
      out.write("\t\t\t \t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tfunction getNotificationArray(){\r\n");
      out.write("\t\t\t\tvar jsonArr;\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t \t\turl : \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/appplatform/NotificationForm.echn?action=getNotificationArray\",\r\n");
      out.write("\t\t\t \t\ttype : \"GET\", \r\n");
      out.write("\t\t\t \t\tsuccess : function(data) {\r\n");
      out.write("\t\t\t \t\t\tjsonArr = JSON.parse(data);\r\n");
      out.write("\t\t\t \t\t\tif(isNotNull(jsonArr.notificationArr)){\r\n");
      out.write("\t\t\t \t\t\t\tnotificationArr = JSON.parse(jsonArr.notificationArr);\r\n");
      out.write("\t\t\t \t \t\t\tnotifyCount = notificationArr.length;\r\n");
      out.write("\t\t\t \t \t\t\tupdateNotificationCount(notifyCount);\r\n");
      out.write("\t\t\t \t \t\t\t//hideNotificationCount();\r\n");
      out.write("\t\t\t \t \t\t}\r\n");
      out.write("\t\t\t \t \t\tif(notificationArr.length == \"0\"){\r\n");
      out.write("\t\t\t \t \t\t\temptyNotifiactionPopup();\r\n");
      out.write("\t\t\t \t \t\t\tupdateNotificationCount(notifyCount);\r\n");
      out.write("\t\t\t \t \t\t}\r\n");
      out.write("\t\t\t\t\t }\r\n");
      out.write("\t\t\t\t });\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t$(\".cs-user-icon\").click(function(e){\r\n");
      out.write("\t\t\t\tif($(this).hasClass('active')){\r\n");
      out.write("\t\t\t\t\t$(this).removeClass('active');\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t$(this).addClass('active');\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t$('.cs-n-account-setting').toggle();\r\n");
      out.write("\t\t\t\t$('.cs-popover-wrapper').removeClass('open');\r\n");
      out.write("\t\t\t\te.stopPropagation();\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t$('[data-role=\"popover\"]').popover();\r\n");
      out.write("\r\n");
      out.write("\t</script>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
